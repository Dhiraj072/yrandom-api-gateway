buildscript {
    ext {
        springBootVersion = '2.0.4.RELEASE'
    }
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.+"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "jp.classmethod.aws.beanstalk"
apply plugin: 'jacoco'

version = '0.0.1-SNAPSHOT'
ext.artifactId = 'yrandom'
ext.timestamp = new Date().format("yyyyMMdd'_'HHmmss", TimeZone.default)
ext.versionDesc = "${version}-${timestamp}"
ext.defaultEncoding = 'UTF-8'

group = 'com.github.dhiraj072'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

// Configures the classpath and the source and resource directories
// of the integrationTest task.
sourceSets {
    //Declaring this source set creates compile time and runtime configurations for it.
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

// Configure source directory and uses the correct classpath.
task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    // Ensure that integration tests are run every time
    outputs.upToDateWhen { false }
}

//Ensure that the check task fails the build if there are failing integration tests.
check.dependsOn integrationTest
//Ensure that our unit tests are run before our integration tests
integrationTest.mustRunAfter test

jacocoTestReport {
    executionData test, integrationTest
    reports {
        xml.enabled
        xml.destination file('build/reports/jacoco/report.xml')
        html.enabled
        html.destination file('build/reports/jacoco/htmlReport')
    }
}

check.dependsOn jacocoTestReport

//Configures the compile and runtime configurations for our integration tests
//and includes the dependencies of the test task.
configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

repositories {
    mavenCentral()
}

// Ensure that the HTML reports of unit and integration tests are written to different directories.
tasks.withType(Test) {
    reports.html.setDestination(file("${reporting.baseDir}/${name}"))
    environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: "dev"
    // Enable JUnit 5
    useJUnitPlatform()
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

bootRun {
    environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: "staging"
}

ext {
    springCloudVersion = 'Finchley.SR1'
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.cloud:spring-cloud-starter-openfeign'
    compile 'org.springframework.cloud:spring-cloud-starter-netflix-ribbon'
    compile 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile group: 'org.springframework.data', name: 'spring-data-rest-hal-browser', version: '3.0.8.RELEASE'
    compile 'com.fasterxml.jackson.core:jackson-databind'
    compile 'com.google.apis:google-api-services-youtube:v3-rev205-1.25.0'
    compile 'com.google.api-client:google-api-client:1.25.0'
    compile 'com.google.oauth-client:google-oauth-client-jetty:1.25.0'
    runtime 'com.h2database:h2'
    testCompile 'io.rest-assured:rest-assured:3.0.0'
    testCompile 'io.rest-assured:json-schema-validator:3.0.0'
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude group:'junit'
    }
    testCompile 'org.junit.jupiter:junit-jupiter-api'
    testCompile 'io.specto:hoverfly-java:0.11.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// Requires AWS_SECRET_ACCESS_KEY and AWS_ACCESS_KEY_ID env set
aws {
    region = "ap-southeast-1"
}

beanstalk {
    appName "yrandom"
    appDesc "yrandom"

    version {
        label = "yrandom-${versionDesc}"
        description = "${artifactId} v${version}"
        bucket = "elasticbeanstalk-${aws.region}-${aws.accountId}"
        key = "eb-apps/${artifactId}/${artifactId}-${versionDesc}.zip"
    }

    configurationTemplates {
        production {
            optionSettings = file("src/main/eb/production.json")
            solutionStackName = "64bit Amazon Linux 2018.03 v2.7.8 running Java 8"
        }
    }

    environment {
        envName = "yrandom"
        envDesc = "yrandom"
        templateName = "production"
        versionLabel = "yrandom-${versionDesc}"
        tags = [
                VERSION: "${versionDesc}".toString(),
                GROUP: "Eng"
        ]
    }
}

task createBundle(type: Zip) {
    archiveName = jar.archiveName.substring(0, jar.archiveName.length() - 4) + ".zip"
    from tasks.bootJar
}

task uploadBundle(type: jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask, dependsOn: createBundle) {
    group "AWS"
    description "Upload ${artifactId} application bundle file to S3."

    bucketName "elasticbeanstalk-${aws.region}-${aws.accountId}"
    key "eb-apps/${artifactId}/${artifactId}-${versionDesc}.zip"
    file project.createBundle.archivePath
    overwrite project.version.endsWith("-SNAPSHOT")
}

awsEbCreateApplicationVersion.dependsOn uploadBundle
